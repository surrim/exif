<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\exif\ExifContent;
use Drupal\Node\NodeInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\exif\ExifHelp;

/**
 * @author: Jean-Philippe Hautin
 *
 */
/*
function exif_menu() {
  $items['admin/config/media/exif'] = array(
    'title' => 'Image Metadata',
    'page callback' => 'exif_admin_settings',
    'access arguments' => array('administer image metadata'),
    'description' => t('Display available fields'),
    'access callback' => 'user_access',
    'file' => 'exif.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/media/exif/general'] = array(
    'title' => 'Image Metadata',
    'page callback' => 'esettingsxif_admin_settings',
    'access arguments' => array('administer image metadata'),
    'description' => t('Display available fields'),
    'access callback' => 'user_access',
    'file' => 'exif.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/media/exif/settings'] = array(
    'title' => 'Image Metadata fields settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('exif_admin_settings_form'),
    'access arguments' => array('administer image metadata'),
    'description' => t('Images Metadata Settings'),
    'access callback' => 'user_access',
  	'file' => 'exif.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}
*/


/**
 * Implements hook_help().
 */
function exif_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.exif':
      return ExifHelp::content();
    default :
      return NULL;
  }
}

/**
 * Implements hook_theme().
 */
function exif_theme() {
  return array(
    'exif_sample' => array(
      'template' => 'exif_sample'
    ),
    'exif_helper_page' => array(
      'variables' => ['message' => NULL],
      'template' => 'exif_helper_page'
    )
  );
}


/**
 * implementation of hook_entity_presave (drupal 8)
 *
 * Calculate the value for each metadata field so they can be stored correctly.
 *
 * @param $entity EntityInterface entity to be saved.
 *
 */
function exif_entity_presave(EntityInterface $entity) {
  if ($entity instanceof NodeInterface) {
    $config = Drupal::configFactory()->get('exif.settings');
    $shouldUpdateMetadata = $config->get('update_metadata');
    if (!isset($shouldUpdateMetadata)) {
      $shouldUpdateMetadata = true;
    }
    $inserting = !isset($entity->original);
    if ($inserting || $shouldUpdateMetadata) {
      $exifContentHandler = new ExifContent();
      $exifContentHandler->node_insert_update($entity);
    }
  }
}




